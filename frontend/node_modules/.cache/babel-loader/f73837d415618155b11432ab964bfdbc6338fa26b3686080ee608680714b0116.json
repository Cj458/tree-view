{"ast":null,"code":"var _jsxFileName = \"/Users/caleb/Desktop/Projects/CRM/frontend/src/v3_search/TreeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeStateContext = /*#__PURE__*/createContext();\nconst toggleNode = (nodes, id, expanded) => {\n  return nodes.map(node => {\n    if (node.id === id) {\n      return {\n        ...node,\n        isExpanded: expanded\n      };\n    }\n    if (node.children) {\n      return {\n        ...node,\n        children: toggleNode(node.children, id, expanded)\n      };\n    }\n    return node;\n  });\n};\nconst updateAllNodes = (nodes, isExpanded) => {\n  return nodes.map(node => {\n    if (node.children) {\n      return {\n        ...node,\n        isExpanded,\n        children: updateAllNodes(node.children, isExpanded)\n      };\n    }\n    return {\n      ...node,\n      isExpanded\n    };\n  });\n};\nconst searchNodesAndUpdateHighlight = (nodes, query) => {\n  nodes.forEach(node => {\n    let shouldHighlight = query.length ? node.name.toLowerCase().includes(query.toLowerCase()) : false;\n    node.isHighlight = shouldHighlight;\n    if (node.children) {\n      searchNodesAndUpdateHighlight(node.children, query);\n      if (node.children.some(child => child.isHighlight)) {\n        node.isHighlight = true;\n      }\n    }\n  });\n  return nodes;\n};\nconst treeReducer = (state, action) => {\n  console.log(\"ttt\", action);\n  switch (action.type) {\n    case \"INIT_DATA\":\n      return action.data;\n    case \"TOGGLE_NODE\":\n      return toggleNode(state, action.id, action.isExpanded);\n    case \"EXPAND_ALL\":\n      return updateAllNodes(state, true);\n    case \"COLLAPSE_ALL\":\n      return updateAllNodes(state, false);\n    case \"SEARCH\":\n      return searchNodesAndUpdateHighlight(state, action.query);\n    default:\n      return state;\n  }\n};\nexport const TreeProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(treeReducer, []); // Default state set as an empty array\n\n  return /*#__PURE__*/_jsxDEV(TreeStateContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeProvider, \"8pXRrr8ws9JzhvliRQlKIDFcnHU=\");\n_c = TreeProvider;\nexport const useTreeState = () => {\n  _s2();\n  const context = useContext(TreeStateContext);\n  return context;\n};\n_s2(useTreeState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TreeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useState","jsxDEV","_jsxDEV","TreeStateContext","toggleNode","nodes","id","expanded","map","node","isExpanded","children","updateAllNodes","searchNodesAndUpdateHighlight","query","forEach","shouldHighlight","length","name","toLowerCase","includes","isHighlight","some","child","treeReducer","state","action","console","log","type","data","TreeProvider","_ref","_s","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTreeState","_s2","context","$RefreshReg$"],"sources":["/Users/caleb/Desktop/Projects/CRM/frontend/src/v3_search/TreeContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useState } from \"react\";\r\n\r\nconst TreeStateContext = createContext();\r\n\r\nconst toggleNode = (nodes, id, expanded) => {\r\n  return nodes.map((node) => {\r\n    if (node.id === id) {\r\n      return { ...node, isExpanded: expanded };\r\n    }\r\n    if (node.children) {\r\n      return { ...node, children: toggleNode(node.children, id, expanded) };\r\n    }\r\n    return node;\r\n  });\r\n};\r\n\r\nconst updateAllNodes = (nodes, isExpanded) => {\r\n  return nodes.map((node) => {\r\n    if (node.children) {\r\n      return {\r\n        ...node,\r\n        isExpanded,\r\n        children: updateAllNodes(node.children, isExpanded)\r\n      };\r\n    }\r\n    return { ...node, isExpanded };\r\n  });\r\n};\r\n\r\nconst searchNodesAndUpdateHighlight = (nodes, query) => {\r\n  nodes.forEach((node) => {\r\n    let shouldHighlight = query.length\r\n      ? node.name.toLowerCase().includes(query.toLowerCase())\r\n      : false;\r\n\r\n    node.isHighlight = shouldHighlight;\r\n\r\n    if (node.children) {\r\n      searchNodesAndUpdateHighlight(node.children, query);\r\n      if (node.children.some((child) => child.isHighlight)) {\r\n        node.isHighlight = true;\r\n      }\r\n    }\r\n  });\r\n\r\n  return nodes;\r\n};\r\n\r\nconst treeReducer = (state, action) => {\r\n  console.log(\"ttt\", action);\r\n  switch (action.type) {\r\n    case \"INIT_DATA\":\r\n      return action.data;\r\n    case \"TOGGLE_NODE\":\r\n      return toggleNode(state, action.id, action.isExpanded);\r\n    case \"EXPAND_ALL\":\r\n      return updateAllNodes(state, true);\r\n    case \"COLLAPSE_ALL\":\r\n      return updateAllNodes(state, false);\r\n    case \"SEARCH\":\r\n      return searchNodesAndUpdateHighlight(state, action.query);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const TreeProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(treeReducer, []); // Default state set as an empty array\r\n\r\n  return (\r\n    <TreeStateContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </TreeStateContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTreeState = () => {\r\n  const context = useContext(TreeStateContext);\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}